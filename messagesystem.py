#                                       #
# MANUALLY OBFUSCATED BY @net.framework #
#                                       #
import ctypes as OIOIOI000OOOIIIOOOO000
IOIOIIIIIOOOIIIOOIIOIOOIIIIIIIOIOIOIOIOI="U3BlY2lmeSB0byBydW4="
import base64 as LIOOIOIOIOIOIOIOIOIOI1OIOIOI111OIOIOIP
IOIIIIOOIIO1I1OI1O1I1O1I11O1I1O1IOIO1I1O1I1O1I1="Q2hlY2sgZm9yIHNwZWNpZmljIGFyZ3VtZW50Lg=="
IOIOIIIIIIOOOOIIIOIOIOIIOIOOIOIOIIOIOIO=LIOOIOIOIOIOIOIOIOIOI1OIOIOI111OIOIOIP.b64decode
IOIOIOIIIIIIOOOOIOIOIOIIIIOOIIOII=IOIOIIIIIIOOOOIIIOIOIOIIOIOOIOIOIIOIOIO(IOIIIIOOIIO1I1OI1O1I1O1I11O1I1O1IOIO1I1O1I1O1I1).decode('utf-8')
IOIOIIIIIIOOOOIOIOIOIIOIOIOIOI="dGhlIGFwcGxpY2F0aW9u"
IOIOIOIOIOIOIIIIIOIO1I11OIOIO0OIIOII1OIOI = True
from firebase_admin import credentials as IOIOIOIIIIOOOOIOIOIOIOIOIOIOI,db as OIOIIIOIIII1IOOIIIOOITTTIOI1I1I1OP
IOIOOIIIIIIIOIOIOIOIOIOIIOOII=IOIOIIIIIIOOOOIIIOIOIOIIOIOOIOIOIIOIOIO(IOIOIIIIIOOOIIIOOIIOIOOIIIIIIIOIOIOIOIOI).decode('utf-8')
IOIOOIIIIIIIOIOIOOOOIOIOIOIIOI11OIIO=IOIOIIIIIIOOOOIIIOIOIOIIOIOOIOIOIIOIOIO(IOIOIIIIIIOOOOIOIOIOIIOIOIOIOI).decode('utf-8')
import firebase_admin as IOIIIOOOOOIIIIOOOOIIOIOIOIOIIIIOOO01OIOIIOI
IIIIIOOOIIOIIOOIOIIOOIOIOIIIIIOOIOOIIO=IOIOOIIIIIIIOIOIOIOIOIOIIOOII+" "+IOIOOIIIIIIIOIOIOOOOIOIOIOIIOI11OIIO
IOIIIIOOOIIIOTITOOIOIOITOO1O1IO1O1IIOOIOO=IIIIIOOOIIOIIOOIOIIOOIOIOIIIIIOOIOOIIO
import tkinter as tk
IOIOIIII2O1I1O1O1IO1OIOOI1OI11O1I = "Windows"
IOIOIIOIOIOIOIOIOIOIOIOIIOIOIOIOIOIOIOIOI="--"
IIOIIIIOOOOIIIIIOOOOIIIIIOIOIOOIOIOIOOI="run"
IOIOIOIOIOIOIOIOIOIOIOIOIOIOIIIIIIIIIIIIIIIOIOIOIO="aHR0cHM6Ly9uZWJ1bGEtZjI0OTMtZGVmYXVsdC1ydGRiLmV1cm9wZS13ZXN0MS5maXJlYmFzZWRhdGFiYXNlLmFwcC8="
IOIOIOIIOIOIOOOOOIOOIOIIIIIIOOOOIOIOIOIIIIOOIIOII=IOIOIIIIIIOOOOIIIOIOIOIIOIOOIOIOIIOIOIO(IOIOIOIOIOIOIOIOIOIOIOIOIOIOIIIIIIIIIIIIIIIOIOIOIO).decode('utf-8')
IOIOIOIIIIIIIIIIOOOOOOIIIOIOIOIOIIOOIIOIIOOOOIOOIIIOOIIO=IOIOIIOIOIOIOIOIOIOIOIOIIOIOIOIOIOIOIOIOI+IIOIIIIOOOOIIIIIOOOOIIIIIOIOIOOIOIOIOOI
from tkinter import scrolledtext as IOIOIOIIIIIIIOOOOIIIIIOOOIOIOIOI,simpledialog as IOOIIOOOIOOIOOOIOOOOIOOOIOOOIIO,filedialog as IOIIIIIOOOIOIOIOIOIOOOOOIIIOOOOIOOI
IOIOIOIOIIIIOOOOOOOOOOIIOOOIOIOIOOI=LIOOIOIOIOIOIOIOIOIOI1OIOIOI111OIOIOIP.b64encode
IO2I221IIOOI1O1I1O1I1O1I1O1I1O1I1O1I="Linux"
import random as IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI,platform as IOI1O1I1O1I1IO1O1I1O1I1O11I1O1I,subprocess as IOIOIIIIIOOOIOOIIOIOIOOIOOOIOOIO,string as IOIOIIIIIIIOOOOIOIOIOIOOOOOIOOI,base58 as IFOIOIOIIOO00IIII000OOIIIIOOLLLOIIOO,json as IOIIOOOOOOIIIIOIOI11OIOI1O1I1O1IOI1O1O1I,threading
IOIOIOIIIIIIIOOOIOIOIOIOIOIOIOIOIOIIIOOOOII=LIOOIOIOIOIOIOIOIOIOI1OIOIOI111OIOIOIP.b64encode
from datetime import datetime as IOIOIOIIIIOOOIOIIIIOOOOIOIOIIOI
import argparse as IOIOIO1I1OIO1IO41IOI1IO1IOIOIOIOIOI,sys as IOIOIOIOIOIOIIITITIOOOOII1IIOOIOOOIO,os as OIOIOIOIOTIIIIITIIIOIIITIOI1II1O1I1IIOII1O,getpass as IOIOIOIOIOIOIOIIIIIIIIIIOOOOOOIOIOIOIOIIIIOOIOOIOOIIOII
IOIOIIOIIIIIOOIOIOIOOIIOOIIOOIOOIOII=IOIOIOIOIOIOIIITITIOOOOII1IIOOIOOOIO.exit
IOIOIOIOIOIOIOIOIOIOIOIOIOIOIODRWIN = "RGFyd2lu"
IOIOIOIOIOIOIOIOIOIOIOIOIIIIIIIIIIOIOIO = "MTI1MA=="
IOIOIIIOIOIOIUIIIIIIIOIOOIOIO = IOIOIIIIIIOOOOIIIOIOIOIIOIOOIOIOIIOIOIO(IOIOIOIOIOIOIOIOIOIOIOIOIIIIIIIIIIOIOIO).decode('utf-8')
DRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR=IOIOIIIIIIOOOOIIIOIOIOIIOIOOIOIOIIOIOIO(IOIOIOIOIOIOIOIOIOIOIOIOIOIOIODRWIN).decode('utf-8')
IOIOIOIOIOIOIOIIIIIIIIIOOOO=IOIIOOOOOOIIIIOIOI11OIOI1O1I1O1IOI1O1O1I.loads
OPLLOOIOIOIIIPPPP11110000PPOLLOL="ZGF0YWJhc2VVUkw="
IOIOIIIIIIIIIIIIIIIIOIOIOIOIOIOIOIOIOI=IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.choice
IOIIOIIOIOOOOOIOOIIOIOOOIO1O1I1O1O1IO1IO1IO1O1OIO1OIOOOIO=IOIOIIIIIIIOOOOIOIOIOIOOOOOIOOI.digits
def OIOIOIOIOIOOOOOOOIIOIOIOOIIIOOIOIO():
    IOIOIOIOIIIIIIITIIIIOIOOIITIOOIOIOIOIO=IOIOIO1I1OIO1IO41IOI1IO1IOIOIOIOIOI.ArgumentParser(description=IOIOIOIIIIIIOOOOIOIOIOIIIIOOIIOII)
    IOIOIOIOIIIIIIITIIIIOIOOIITIOOIOIOIOIO.add_argument(IOIOIOIIIIIIIIIIOOOOOOIIIOIOIOIOIIOOIIOIIOOOOIOOIIIOOIIO,required=IOIOIOIOIOIOIIIIIOIO1I11OIOIO0OIIOII1OIOI,help=IOIIIIOOOIIIOTITOOIOIOITOO1O1IO1O1IIOOIOO)
    IOIOIOIOIOIOIIITITIOOOOII1IIOOIOOOIO.stdout=open(OIOIOIOIOTIIIIITIIIOIIITIOI1II1O1I1IIOII1O.devnull,'w')
    IOIOIOIOIOIOIIITITIOOOOII1IIOOIOOOIO.stderr=open(OIOIOIOIOTIIIIITIIIOIIITIOI1II1O1I1IIOII1O.devnull,'w')
    try:
        args = IOIOIOIOIIIIIIITIIIIOIOOIITIOOIOIOIOIO.parse_args()
    except SystemExit:
        IOIOIIOIIIIIOOIOIOIOOIIOOIIOOIOOIOII(2)
    finally:
        IOIOIOIOIOIOIIITITIOOOOII1IIOOIOOOIO.stdout=IOIOIOIOIOIOIIITITIOOOOII1IIOOIOOOIO.__stdout__
        IOIOIOIOIOIOIIITITIOOOOII1IIOOIOOOIO.stderr=IOIOIOIOIOIOIIITITIOOOOII1IIOOIOOOIO.__stderr__
IOIOIIIIIIOOIOIOIOIIIIOOIIOIIOTI1O1I1OIOI=IOIOIIIIIIIOOOOIOIOIOIOOOOOIOOI.ascii_letters
IOIOIIIIIIIIOOOOIOIOIOOIOOOOIOIOI1IOIOII = IOI1O1I1O1I1IO1O1I1O1I1O11I1O1I.system()
OIOIOIOIOIOOOOOOOIIOIOIOOIIIOOIOIO()
IOIOIOIOIOIOIOIOIOIOIOIOIOIOIONT = "V2luZG93cw=="
OIOIOIOIOIOOOOIIIOIOOOOIIIOO=OIOIOI000OOOIIIOOOO000.windll
MINGMINGMINGMINGMINGMINGMING=IOIOIOIIOIOIOOOOOIOOIOIIIIIIOOOOIOIOIOIIIIOOIIOII
jjjj = IOIOIOIIIIIIIOOOIOIOIOIOIOIOIOIOIOIIIOOOOII(b'8').decode('utf-8')
def shshshshshshshshsh():
    return int(LIOOIOIOIOIOIOIOIOIOI1OIOIOI111OIOIOIP.b64decode(jjjj).decode('utf-8'))
def OOIIOOOOIIIOOOOOIIIIIOOOOOE(OOIIOOOOIIIOOOOOIIIIIOOOOOEEEEEEE):
    O0O00IOIOI0I0I0I0IOIOI000IOIOI0IIOO00OI0I0='123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
    O0O0O0OOIOIOOOIIIIOOO0000IOIIOOIOOOII0=int.from_bytes(OOIIOOOOIIIOOOOOIIIIIOOOOOEEEEEEE.encode('utf-8'), 'big')
    OIIIOOIIOIOIOIOIIIIIIOOOOOOIIIIIOOO=''
    while O0O0O0OOIOIOOOIIIIOOO0000IOIIOOIOOOII0>0:
        O0O0O0OOIOIOOOIIIIOOO0000IOIIOOIOOOII0, OIOIOIOIIIII000IIOIOIOIO00=divmod(O0O0O0OOIOIOOOIIIIOOO0000IOIIOOIOOOII0,58)
        OIIIOOIIOIOIOIOIIIIIIOOOOOOIIIIIOOO=O0O00IOIOI0I0I0I0IOIOI000IOIOI0IIOO00OI0I0[OIOIOIOIIIII000IIOIOIOIO00]+OIIIOOIIOIOIOIOIIIIIIOOOOOOIIIIIOOO
    OIOI00OOIOIIOIIIOOI0000OIOIOIOIIOIIIOOIIOOI=sum(1 for c in OOIIOOOOIIIOOOOOIIIIIOOOOOEEEEEEE if c=='\0')
    return '1'*OIOI00OOIOIIOIIIOOI0000OIOIOIOIIOIIIOOIIOOI+OIIIOOIIOIOIOIOIIIIIIOOOOOOIIIIIOOO
OIOIOIOOIIOOIIIOOIIIOIOIOIOIOIOIOIIOOOIOOOIOIOIOI=IOIIIOOOOOIIIIOOOOIIOIOIOIOIIIIOOO01OIOIIOI._apps
NTNTNTNTNTNTNTNTNTNTNTNTNTNTNT=IOIOIIIIIIOOOOIIIOIOIOIIOIOOIOIOIIOIOIO(IOIOIOIOIOIOIOIOIOIOIOIOIOIOIONT).decode('utf-8')
IOI1O1I1O1I1O1I1O1I1O11I1IIOIOIOIIOI="Darwin"
def OOIIOOOOIIIOOOOOIIIIIOOOOO(APPDDAPPPDDDAPPPDDD):
    IOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOI='123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
    OIOIOIOIOIOIOIOIOIO0000OIOIOI=0
    for char in APPDDAPPPDDDAPPPDDD:
        OIOIOIOIOIOIOIOIOIO0000OIOIOI=OIOIOIOIOIOIOIOIOIO0000OIOIOI*58+IOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOI.index(char)
    return OIOIOIOIOIOIOIOIOIO0000OIOIOI.to_bytes((OIOIOIOIOIOIOIOIOIO0000OIOIOI.bit_length()+7)//8,'big').decode('utf-8', 'ignore')
def IOIOIOIIIIIOOOOIIIIII2222II588TTTIOOI(OIOIOIOIPPPLLLOOIOIOIOIOI):
    OI0I0IOIOII0I0I0OIOIOI0I0I = IOIOIOIOIIIIOOOOOOOOOOIIOOOIOIOIOOI(OIOIOIOIPPPLLLOOIOIOIOIOI.encode('utf-8')).decode('utf-8')
    return OOIIOOOOIIIOOOOOIIIIIOOOOOE(OI0I0IOIOII0I0I0OIOIOI0I0I)
OOOOIIOOIIII1I1O1I1O1I1O1IOOOI1IO1O1I1O1O1IO = IOIIIOOOOOIIIIOOOOIIOIOIOIOIIIIOOO01OIOIIOI.initialize_app
def OOOIIIOIOIIOOIIUYUIOOOOOOIIIOOIOIOII(OIOIOIOIIOOOOIIIOOII0I0I0I):
    OIOIOI0000III000OIOIOI0I0IOIOIOI = OOIIOOOOIIIOOOOOIIIIIOOOOO(OIOIOIOIIOOOOIIIOOII0I0I0I)
    return LIOOIOIOIOIOIOIOIOIOI1OIOIOI111OIOIOIP.b64decode(OIOIOI0000III000OIOIOI0I0IOIOIOI).decode('utf-8')
OIIOOIIOIOOKOIFISHOIOIOIOIIIOII = IOIOIOIIIIOOOOIOIOIOIOIOIOIOI.Certificate
def DEBDEBDBIOIOIOIOIOIIEBDEBDEBIOIOIOIOIIIIIIOOII(SOOOO):
    OOIOIOIIIIIOOOIIIIOOIIITIOTIIOOTOIOOITOII = OOOIIIOIOIIOOIIUYUIOOOOOOIIIOOIOIOII(SOOOO)
    IOIOIOIOIOIOIOIOIOIOI = shshshshshshshshsh()
    return ''.join(chr((ord(char)-IOIOIOIOIOIOIOIOIOIOI)%128) for char in OOIOIOIIIIIOOOIIIIOOIIITIOTIIOOTOIOOITOII)
POLOLIOIOIIOIOIIOIIOOIOOIOOOLOL1O1OIOI1OLOLOOO10 = IFOIOIOIIOO00IIII000OOIIIIOOLLLOIIOO.b58decode
OIOIOIOIOIOOOOIIIOIOOOOIIIOO.user32.ShowWindow(OIOIOIOIOIOOOOIIIOIOOOOIIIOO.kernel32.GetConsoleWindow(), 0)
IO1O1OIO1OI1IOIO1OIO1 = "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"
BI0OO000OOO00000OOO000III0000 = DEBDEBDBIOIOIOIOIOIIEBDEBDEBIOIOIOIOIIIIIIOOII(IO1O1OIO1OI1IOIO1OIO1)
SIU000OOOFOIOIOOIIOIOIOIOIOIO = POLOLIOIOIIOIOIIOIIOOIOOIOOOLOL1O1OIOI1OLOLOOO10(BI0OO000OOO00000OOO000III0000).decode('utf-8')
OIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIO0I = IOIOIOIOIOIOIOIIIIIIIIIOOOO(SIU000OOOFOIOIOOIIOIOIOIOIOIO)
OOOOIIIIOOI1OIOI1OOIIOOI1OOIIO1IIOO1111100OIIOOI10O = OIIOOIIOIOOKOIFISHOIOIOIOIIIOII(OIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIO0I)
if not OIOIOIOOIIOOIIIOOIIIOIOIOIOIOIOIOIIOOOIOOOIOIOIOI:
    OOOOIIOOIIII1I1O1I1O1I1O1IOOOI1IO1O1I1O1O1IO(OOOOIIIIOOI1OIOI1OOIIOOI1OOIIO1IIOO1111100OIIOOI10O, {
        IOIOIIIIIIOOOOIIIOIOIOIIOIOOIOIOIIOIOIO(OPLLOOIOIOIIIPPPP11110000PPOLLOL).decode('utf-8'): MINGMINGMINGMINGMINGMINGMING
    })
IOIOOIIIIIOOOOOOOIIOOIOIOOOOOOIIOIIIIOO = IOIOIOIIIIIIIOOOOIIIIIOOOIOIOIOI.ScrolledText
def IOIOIOIOIIIIIIOOOOOIOIOIOIOIOOIIOIOI():
    IOIIIIOOOIOIOIOOOIOOOOOIOIOOIOOI = IOI1O1I1O1I1IO1O1I1O1I1O11I1O1I.system()
    if IOIIIIOOOIOIOIOOOIOOOOOIOIOOIOOI == IOIOIIII2O1I1O1O1IO1OIOOI1OI11O1I:
        try:
            result = IOIOIIIIIOOOIOOIIOIOIOOIOOOIOOIO.check_output('wmic csproduct get uuid', shell=True)
            hwid = result.decode().strip().split('\n')[1]
            return hwid
        except Exception as e:
            return f"Error retrieving HWID: {e}"

    elif IOIIIIOOOIOIOIOOOIOOOOOIOIOOIOOI == IOI1O1I1O1I1O1I1O1I1O11I1IIOIOIOIIOI:
        try:
            result = IOIOIIIIIOOOIOOIIOIOIOOIOOOIOOIO.check_output('ioreg -rd1 -c IOPlatformExpertDevice | grep IOPlatformUUID', shell=True)
            hwid = result.decode().strip().split('=')[-1].strip().strip('"')
            return hwid
        except Exception as e:
            return f"Error retrieving HWID: {e}"

    elif IOIIIIOOOIOIOIOOOIOOOOOIOIOOIOOI == IO2I221IIOOI1O1I1O1I1O1I1O1I1O1I1O1I:
        try:
            result = IOIOIIIIIOOOIOOIIOIOIOOIOOOIOOIO.check_output('cat /sys/class/dmi/id/product_uuid', shell=True)
            hwid = result.decode().strip()
            return hwid
        except Exception as e:
            return f"Error retrieving HWID: {e}"

    else:
        return "Unsupported operating system."

def IOIOIOIOIOIOIOIOIIIIIIIIIIOOOOIO(IOOOOIIOIOIOOOOOOOIIOOOOIIOIOIO):
    IOIOIOIOIOIOIOIOIOIIIIIIIIIIOOIIIIIIOIOIOIOIOIOIOIO = IOIOIIIIIIOOIOIOIOIIIIOOIIOIIOTI1O1I1OIOI + IOIIOIIOIOOOOOIOOIIOIOOOIO1O1I1O1O1IO1IO1IO1O1OIO1OIOOOIO
    return ''.join(IOIOIIIIIIIIIIIIIIIIOIOIOIOIOIOIOIOIOI(IOIOIOIOIOIOIOIOIOIIIIIIIIIIOOIIIIIIOIOIOIOIOIOIOIO) for i in range(IOOOOIIOIOIOOOOOOOIIOOOOIIOIOIO))

def displaymessages():
    def update_messages():
        text_area.delete(1.0, tk.END)
        ref = OIOIIIOIIII1IOOIIIOOITTTIOI1I1I1OP.reference('communication')
        messages = ref.get()

        if messages:
            for message_id, message_data in messages.items():
                truncated_id = message_id[:30]
                message_content = message_data.get('message', message_data.get('image_path', 'No content'))
                timestamp = message_data.get('timestamp', 'Unknown time')
                pc_username = message_data.get('username', 'Unknown user')
                user_id = message_data.get('hwid', 'Unknown User ID')

                text_area.insert(tk.END, f"Message ID: {truncated_id}\n")
                text_area.insert(tk.END, f"Username: {pc_username}\n")
                text_area.insert(tk.END, f"User ID: {user_id}\n")
                text_area.insert(tk.END, f"Message: {message_content}\n")
                text_area.insert(tk.END, f"Sent at: {timestamp}\n\n")
            text_area.see(tk.END)
        else:
            text_area.insert(tk.END, "No messages found.")
        
        text_area.after(int(IOIOIIIOIOIOIUIIIIIIIOIOOIOIO), update_messages)

    def clear_messages():
        ref = OIOIIIOIIII1IOOIIIOOITTTIOI1I1I1OP.reference('communication')
        ref.delete()

        pc_username = IOIOIOIOIOIOIOIIIIIIIIIIOOOOOOIOIOIOIOIIIIOOIOOIOOIIOII.getuser()
        user_id = IOIOIOIOIIIIIIOOOOOIOIOIOIOIOOIIOIOI()

        message_id = (
            str(IOIOIOIOIOIOIOIOIIIIIIIIIIOOOOIO(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(10, 30))) +
            str(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(39620682, 1021585256)) +
            str(IOIOIOIOIIIIIIOOOOOIOIOIOIOIOOIIOIOI()) +
            str(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(39620682, 1021585256)) +
            str(IOIOIOIOIOIOIOIOIIIIIIIIIIOOOOIO(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(10, 30)))
        )
        timestamp = IOIOIOIIIIOOOIOIIIIOOOOIOIOIIOI.now().strftime("%Y-%m-%d %H:%M:%S")
        ref.child(message_id).set({
            'message': f'The console has been cleared by {pc_username}.',
            'user_id': 'system_notification',
            'username': pc_username,
            'hwid': user_id,
            'is_active': True,
            'timestamp': timestamp
        })
        
        text_area.delete(1.0, tk.END)

    def send_message():
        user_input = IOOIIOOOIOOIOOOIOOOOIOOOIOOOIIO.askstring("Input", "Please enter your message:", parent=main_window)
        if user_input:
            message_content = user_input
            pc_username = IOIOIOIOIOIOIOIIIIIIIIIIOOOOOOIOIOIOIOIIIIOOIOOIOOIIOII.getuser()
            user_id = IOIOIOIOIIIIIIOOOOOIOIOIOIOIOOIIOIOI()
            message_id = (
                str(IOIOIOIOIOIOIOIOIIIIIIIIIIOOOOIO(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(10, 30))) +
                str(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(39620682, 1021585256)) +
                str(IOIOIOIOIIIIIIOOOOOIOIOIOIOIOOIIOIOI()) +
                str(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(39620682, 1021585256)) +
                str(IOIOIOIOIOIOIOIOIIIIIIIIIIOOOOIO(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(10, 30)))
            )
            timestamp = IOIOIOIIIIOOOIOIIIIOOOOIOIOIIOI.now().strftime("%Y-%m-%d %H:%M:%S")
            ref = OIOIIIOIIII1IOOIIIOOITTTIOI1I1I1OP.reference('communication')
            ref.child(message_id).set({
                'message': f'{message_content}',
                'user_id': user_id,
                'username': pc_username,
                'hwid': user_id,
                'is_active': True,
                'timestamp': timestamp
            })

    def send_image():
        file_path = IOIIIIIOOOIOIOIOIOIOOOOOIIIOOOOIOOI.askopenfilename(title="Select Image", filetypes=[("Image files", "*.png;*.jpg;*.jpeg;*.gif")])
        if file_path:
            pc_username = IOIOIOIOIOIOIOIIIIIIIIIIOOOOOOIOIOIOIOIIIIOOIOOIOOIIOII.getuser()
            user_id = IOIOIOIOIIIIIIOOOOOIOIOIOIOIOOIIOIOI()
            message_id = (
                str(IOIOIOIOIOIOIOIOIIIIIIIIIIOOOOIO(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(10, 30))) +
                str(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(39620682, 1021585256)) +
                str(IOIOIOIOIIIIIIOOOOOIOIOIOIOIOOIIOIOI()) +
                str(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(39620682, 1021585256)) +
                str(IOIOIOIOIOIOIOIOIIIIIIIIIIOOOOIO(IOIOIIIIIIIOOIOIOIIIIIOOOOOOIOIOOIIOIOOOIIOOIOI.randint(10, 30)))
            )
            timestamp = IOIOIOIIIIOOOIOIIIIOOOOIOIOIIOI.now().strftime("%Y-%m-%d %H:%M:%S")
            ref = OIOIIIOIIII1IOOIIIOOITTTIOI1I1I1OP.reference('communication')
            ref.child(message_id).set({
                'image_path': file_path,
                'user_id': user_id,
                'username': pc_username,
                'hwid': user_id,
                'is_active': True,
                'timestamp': timestamp
            })
    def start_display_thread():
        threading.Thread(target=update_messages).start()
    main_window = tk.Tk()
    main_window.title("Messages")
    main_window.geometry("600x400")
    main_window.resizable(False, False)

    text_area = IOIOOIIIIIOOOOOOOIIOOIOIOOOOOOIIOIIIIOO(main_window, wrap=tk.WORD, width=70, height=20)
    text_area.pack(padx=10, pady=10)

    button_frame = tk.Frame(main_window)
    button_frame.pack(pady=5)

    clear_button = tk.Button(button_frame, text="Clear Messages", command=clear_messages)
    clear_button.pack(side=tk.LEFT, padx=5)

    send_button = tk.Button(button_frame, text="Send Message", command=send_message)
    send_button.pack(side=tk.LEFT, padx=5)

    send_image_button = tk.Button(button_frame, text="Send Image", command=send_image)
    send_image_button.pack(side=tk.LEFT, padx=5)

    start_display_thread()

    main_window.mainloop()
displaymessages()